// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  RIDER
  FIXER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(RIDER)
  postalCode    String?
  phoneNumber   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Fixer specific fields
  skills        String[]
  hourlyRate    Float?
  isAvailable   Boolean   @default(false)
  
  // Wallet
  walletBalance Float     @default(0)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  
  // Repair relations
  repairsAsRider Repair[] @relation("RiderRepairs")
  repairsAsFixer Repair[] @relation("FixerRepairs")
  
  // Payout relations
  payouts       Payout[]
  
  // Referral relations
  referredBy    String?
  referrals     Referral[] @relation("Referrer")
  referredUsers Referral[] @relation("Referred")

  // Profile relations
  fixerProfile  FixerProfile?
  
  // Notification relations
  notifications Notification[] @relation("UserNotifications")
  sentNotifications Notification[] @relation("SenderNotifications")
  
  // Notification preferences
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  inAppNotifications Boolean @default(true)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum RepairStatus {
  PENDING     // Initial state when repair is created
  MATCHED     // When a fixer is matched but hasn't accepted yet
  ACCEPTED    // When fixer accepts the repair
  DECLINED    // When fixer declines the repair
  BOOKED      // When rider pays platform fee
  COMPLETED   // When repair is completed
  CANCELLED   // When either party cancels
}

model Repair {
  id          String       @id @default(cuid())
  riderId     String
  fixerId     String?
  issueType   String
  description String?
  imageUrl    String?
  status      RepairStatus @default(PENDING)
  postalCode  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  bookingTime DateTime?
  
  // Payment info
  platformFee Float       @default(4)
  repairCost  Float?
  paymentId   String?
  isPaid      Boolean     @default(false)
  
  // Assignment info
  assignedAt  DateTime?
  acceptedAt  DateTime?
  declinedAt  DateTime?
  declineReason String?
  
  // Relations
  rider       User        @relation("RiderRepairs", fields: [riderId], references: [id])
  fixer       User?       @relation("FixerRepairs", fields: [fixerId], references: [id])
  payment     Payment?    @relation(fields: [paymentId], references: [id])
}

model Payment {
  id            String   @id @default(cuid())
  amount        Float
  currency      String   @default("eur")
  stripeId      String?  @unique
  status        String
  createdAt     DateTime @default(now())
  
  // Relations
  repairs       Repair[]
}

model Payout {
  id            String   @id @default(cuid())
  userId        String
  amount        Float
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  processedAt   DateTime?
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
}

model Referral {
  id            String   @id @default(cuid())
  referrerId    String
  referredId    String
  isRedeemed    Boolean  @default(false)
  createdAt     DateTime @default(now())
  redeemedAt    DateTime?
  
  // Relations
  referrer      User     @relation("Referrer", fields: [referrerId], references: [id])
  referred      User     @relation("Referred", fields: [referredId], references: [id])
}

// New models for enhanced functionality

enum NotificationType {
  REPAIR_REQUEST
  REPAIR_MATCHED
  REPAIR_ACCEPTED
  REPAIR_DECLINED
  REPAIR_BOOKED
  REPAIR_COMPLETED
  REPAIR_CANCELLED
  PAYMENT_RECEIVED
  PAYOUT_PROCESSED
  SYSTEM_MESSAGE
}

model Notification {
  id            String           @id @default(cuid())
  userId        String
  senderId      String?
  type          NotificationType
  title         String
  message       String
  isRead        Boolean          @default(false)
  createdAt     DateTime         @default(now())
  readAt        DateTime?
  linkUrl       String?
  
  // Relations
  user          User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  sender        User?            @relation("SenderNotifications", fields: [senderId], references: [id], onDelete: SetNull)
}

model FixerProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  bio               String?  @db.Text
  experience        String?  @db.Text
  education         String?  @db.Text
  certifications    String[]
  languages         String[]
  profileImageUrl   String?
  galleryImages     String[]
  averageRating     Float?
  totalReviews      Int      @default(0)
  specialties       String[]
  toolsOwned        String[]
  preferredWorkArea String[]
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews           Review[]
}

model Review {
  id            String   @id @default(cuid())
  profileId     String
  riderId       String
  rating        Int
  comment       String?  @db.Text
  createdAt     DateTime @default(now())
  
  // Relations
  fixerProfile  FixerProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}